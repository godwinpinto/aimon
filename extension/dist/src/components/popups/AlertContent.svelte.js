import { createHotContext as __vite__createHotContext } from "/vendor/vite-client.js";import.meta.hot = __vite__createHotContext("/src/components/popups/AlertContent.svelte.js");/* src/components/popups/AlertContent.svelte generated by Svelte v3.59.2 */
import {
	SvelteComponentDev,
	add_location,
	append_dev,
	attr_dev,
	create_slot,
	detach_dev,
	dispatch_dev,
	element,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert_dev,
	safe_not_equal,
	space,
	svg_element,
	transition_in,
	transition_out,
	update_slot_base,
	validate_slots
} from "/vendor/.vite-deps-svelte_internal.js__v--686dd903.js";

import { Alert, Banner } from "/vendor/.vite-deps-flowbite-svelte.js__v--f1815d76.js";
import __vite__cjsImport2_xss from "/vendor/.vite-deps-xss.js__v--ceb06fb4.js"; const xss = __vite__cjsImport2_xss.__esModule ? __vite__cjsImport2_xss.default : __vite__cjsImport2_xss;
import __vite__cjsImport3_showdown from "/vendor/.vite-deps-showdown.js__v--65ac0898.js"; const Showdown = __vite__cjsImport3_showdown.__esModule ? __vite__cjsImport3_showdown.default : __vite__cjsImport3_showdown;
const file = "src/components/popups/AlertContent.svelte";

// (94:51) 
function create_if_block_3(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "stroke-linecap", "round");
			attr_dev(path, "stroke-linejoin", "round");
			attr_dev(path, "d", "M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z");
			add_location(path, file, 104, 20, 3747);
			attr_dev(svg, "class", "h-10 w-10");
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "stroke", "currentColor");
			attr_dev(svg, "stroke-width", "1.5");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "aria-hidden", "true");
			add_location(svg, file, 95, 16, 3419);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(94:51) ",
		ctx
	});

	return block;
}

// (77:48) 
function create_if_block_2(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "stroke-linecap", "round");
			attr_dev(path, "stroke-linejoin", "round");
			attr_dev(path, "d", "M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z");
			add_location(path, file, 87, 20, 2996);
			attr_dev(svg, "class", "h-10 w-10");
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "stroke", "currentColor");
			attr_dev(svg, "stroke-width", "1.5");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "aria-hidden", "true");
			add_location(svg, file, 78, 16, 2668);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(77:48) ",
		ctx
	});

	return block;
}

// (60:51) 
function create_if_block_1(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "stroke-linecap", "round");
			attr_dev(path, "stroke-linejoin", "round");
			attr_dev(path, "d", "M12 9v3.75m9-.75a9 9 0 11-18 0 9 9 0 0118 0zm-9 3.75h.008v.008H12v-.008z");
			add_location(path, file, 70, 20, 2325);
			attr_dev(svg, "class", "h-10 w-10");
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "stroke", "currentColor");
			attr_dev(svg, "stroke-width", "1.5");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "aria-hidden", "true");
			add_location(svg, file, 61, 16, 1997);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(60:51) ",
		ctx
	});

	return block;
}

// (44:12) {#if props.alertType == "danger"}
function create_if_block(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "stroke-linecap", "round");
			attr_dev(path, "stroke-linejoin", "round");
			attr_dev(path, "d", "M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z");
			add_location(path, file, 53, 20, 1544);
			attr_dev(svg, "class", "h-10 w-10");
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "stroke", "currentColor");
			attr_dev(svg, "stroke-width", "1.5");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "aria-hidden", "true");
			add_location(svg, file, 44, 16, 1216);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(44:12) {#if props.alertType == \\\"danger\\\"}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div5;
	let div4;
	let div0;
	let t0;
	let div3;
	let div1;
	let raw0_value = /*props*/ ctx[0].title + "";
	let t1;
	let div2;
	let t2;
	let div5_class_value;
	let current;

	function select_block_type(ctx, dirty) {
		if (/*props*/ ctx[0].alertType == "danger") return create_if_block;
		if (/*props*/ ctx[0].alertType == "warning") return create_if_block_1;
		if (/*props*/ ctx[0].alertType == "info") return create_if_block_2;
		if (/*props*/ ctx[0].alertType == "success") return create_if_block_3;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type && current_block_type(ctx);
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	const block = {
		c: function create() {
			div5 = element("div");
			div4 = element("div");
			div0 = element("div");
			if (if_block) if_block.c();
			t0 = space();
			div3 = element("div");
			div1 = element("div");
			t1 = space();
			div2 = element("div");
			t2 = space();
			if (default_slot) default_slot.c();
			attr_dev(div0, "class", "py-1 pr-2");
			add_location(div0, file, 41, 8, 1102);
			attr_dev(div1, "class", "font-bold m-0");
			add_location(div1, file, 113, 12, 4041);
			attr_dev(div2, "class", "text-sm m-0");
			add_location(div2, file, 114, 12, 4106);
			add_location(div3, file, 112, 8, 4023);
			attr_dev(div4, "class", "flex");
			add_location(div4, file, 40, 4, 1075);
			attr_dev(div5, "id", "alertExtension");
			attr_dev(div5, "class", div5_class_value = "bg-" + /*alertColor*/ ctx[1] + "-100 border-t-4 border-" + /*alertColor*/ ctx[1] + "-500 rounded-b text-" + /*alertColor*/ ctx[1] + "-900 px-4 py-3 w-full");
			attr_dev(div5, "role", "alert");
			add_location(div5, file, 35, 0, 907);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div5, anchor);
			append_dev(div5, div4);
			append_dev(div4, div0);
			if (if_block) if_block.m(div0, null);
			append_dev(div4, t0);
			append_dev(div4, div3);
			append_dev(div3, div1);
			div1.innerHTML = raw0_value;
			append_dev(div3, t1);
			append_dev(div3, div2);
			div2.innerHTML = /*htmlContent*/ ctx[2];
			append_dev(div4, t2);

			if (default_slot) {
				default_slot.m(div4, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type !== (current_block_type = select_block_type(ctx, dirty))) {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div0, null);
				}
			}

			if ((!current || dirty & /*props*/ 1) && raw0_value !== (raw0_value = /*props*/ ctx[0].title + "")) div1.innerHTML = raw0_value;;

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*alertColor*/ 2 && div5_class_value !== (div5_class_value = "bg-" + /*alertColor*/ ctx[1] + "-100 border-t-4 border-" + /*alertColor*/ ctx[1] + "-500 rounded-b text-" + /*alertColor*/ ctx[1] + "-900 px-4 py-3 w-full")) {
				attr_dev(div5, "class", div5_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div5);

			if (if_block) {
				if_block.d();
			}

			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('AlertContent', slots, ['default']);
	let { props } = $$props;
	let alertColor;

	if (props.alertType == "danger") {
		alertColor = "red";
	} else if (props.alertType == "warning") {
		alertColor = "orange";
	} else if (props.alertType == "info") {
		alertColor = "blue";
	} else if (props.alertType == "success") {
		alertColor = "green";
	}

	const mdConvertor = new Showdown.Converter();
	let htmlContent = filterXSS(mdConvertor.makeHtml(props.description));

	setTimeout(
		() => {
			if (!document.getElementById("alertExtension")) {
				return;
			}

			let anchors = document.getElementById("alertExtension").getElementsByTagName("a");

			if (!anchors) {
				return;
			}

			for (var i = 0; i < anchors.length; i++) {
				anchors[i].setAttribute("target", "_blank");
			}
		},
		2000
	);

	$$self.$$.on_mount.push(function () {
		if (props === undefined && !('props' in $$props || $$self.$$.bound[$$self.$$.props['props']])) {
			console.warn("<AlertContent> was created without expected prop 'props'");
		}
	});

	const writable_props = ['props'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AlertContent> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('props' in $$props) $$invalidate(0, props = $$props.props);
		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		Alert,
		Banner,
		xss,
		Showdown,
		props,
		alertColor,
		mdConvertor,
		htmlContent
	});

	$$self.$inject_state = $$props => {
		if ('props' in $$props) $$invalidate(0, props = $$props.props);
		if ('alertColor' in $$props) $$invalidate(1, alertColor = $$props.alertColor);
		if ('htmlContent' in $$props) $$invalidate(2, htmlContent = $$props.htmlContent);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [props, alertColor, htmlContent, $$scope, slots];
}

class AlertContent extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { props: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "AlertContent",
			options,
			id: create_fragment.name
		});
	}

	get props() {
		throw new Error("<AlertContent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set props(value) {
		throw new Error("<AlertContent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

import * as ___SVELTE_HMR_HOT_API from "/vendor/svelte-hmr-runtime-hot-api-esm.js__v--cfdbb230.js";import { adapter as ___SVELTE_HMR_HOT_API_PROXY_ADAPTER } from "/vendor/svelte-hmr-runtime-proxy-adapter-dom.js__v--cfdbb230.js";if (import.meta && import.meta.hot) { if (false) import.meta.hot.acceptExports(['default']);; AlertContent = ___SVELTE_HMR_HOT_API.applyHmr({ m: import.meta, id: "/home/godwin/Desktop/Personal/Github/Hackathon/TiDBFutureApp/aimon/extension/src/components/popups/AlertContent.svelte", hotOptions: {"preserveLocalState":false,"noPreserveStateKey":["@hmr:reset","@!hmr"],"preserveAllLocalStateKey":"@hmr:keep-all","preserveLocalStateKey":"@hmr:keep","noReload":false,"optimistic":false,"acceptNamedExports":true,"acceptAccessors":true,"injectCss":false,"cssEjectDelay":100,"native":false,"importAdapterName":"___SVELTE_HMR_HOT_API_PROXY_ADAPTER","noOverlay":true,"allowLiveBinding":false,"partialAccept":true}, Component: AlertContent, ProxyAdapter: ___SVELTE_HMR_HOT_API_PROXY_ADAPTER, acceptable: true, preserveLocalState: false, emitCss: true, }); }
export default AlertContent;

