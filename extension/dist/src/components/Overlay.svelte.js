import { createHotContext as __vite__createHotContext } from "/vendor/vite-client.js";import.meta.hot = __vite__createHotContext("/src/components/Overlay.svelte.js");/* src/components/Overlay.svelte generated by Svelte v3.59.2 */
import {
	SvelteComponentDev,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach_dev,
	dispatch_dev,
	empty,
	group_outros,
	init,
	insert_dev,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out,
	validate_each_argument,
	validate_slots
} from "/vendor/.vite-deps-svelte_internal.js__v--686dd903.js";

import { onMount } from "/vendor/.vite-deps-svelte.js__v--686dd903.js";
import __vite__cjsImport2_webextensionPolyfill from "/vendor/.vite-deps-webextension-polyfill.js__v--d5bbb659.js"; const browser = __vite__cjsImport2_webextensionPolyfill.__esModule ? __vite__cjsImport2_webextensionPolyfill.default : __vite__cjsImport2_webextensionPolyfill;
import Disclaimer from "/src/components/popups/Disclaimer.svelte.js";
import StickyNotice from "/src/components/popups/StickyNotice.svelte.js";
import BlockPaste from "/src/components/popups/BlockPaste.svelte.js";
import BlockCopy from "/src/components/popups/BlockCopy.svelte.js";
import BlockRightClick from "/src/components/popups/BlockRightClick.svelte.js";
import BlockCut from "/src/components/popups/BlockCut.svelte.js";
const file = "src/components/Overlay.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (41:4) {#if actor.action == "disclaimer"}
function create_if_block_5(ctx) {
	let disclaimer;
	let current;

	disclaimer = new Disclaimer({
			props: { props: /*actor*/ ctx[1].message },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(disclaimer.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(disclaimer, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const disclaimer_changes = {};
			if (dirty & /*actors*/ 1) disclaimer_changes.props = /*actor*/ ctx[1].message;
			disclaimer.$set(disclaimer_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(disclaimer.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(disclaimer.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(disclaimer, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(41:4) {#if actor.action == \\\"disclaimer\\\"}",
		ctx
	});

	return block;
}

// (44:4) {#if actor.action == "sticky"}
function create_if_block_4(ctx) {
	let stickynotice;
	let current;

	stickynotice = new StickyNotice({
			props: { props: /*actor*/ ctx[1].message },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(stickynotice.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(stickynotice, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const stickynotice_changes = {};
			if (dirty & /*actors*/ 1) stickynotice_changes.props = /*actor*/ ctx[1].message;
			stickynotice.$set(stickynotice_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(stickynotice.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(stickynotice.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(stickynotice, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(44:4) {#if actor.action == \\\"sticky\\\"}",
		ctx
	});

	return block;
}

// (47:4) {#if actor.action == "block_paste"}
function create_if_block_3(ctx) {
	let blockpaste;
	let current;

	blockpaste = new BlockPaste({
			props: { props: /*actor*/ ctx[1].message },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(blockpaste.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(blockpaste, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const blockpaste_changes = {};
			if (dirty & /*actors*/ 1) blockpaste_changes.props = /*actor*/ ctx[1].message;
			blockpaste.$set(blockpaste_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blockpaste.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(blockpaste.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(blockpaste, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(47:4) {#if actor.action == \\\"block_paste\\\"}",
		ctx
	});

	return block;
}

// (50:4) {#if actor.action == "block_copy"}
function create_if_block_2(ctx) {
	let blockcopy;
	let current;

	blockcopy = new BlockCopy({
			props: { props: /*actor*/ ctx[1].message },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(blockcopy.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(blockcopy, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const blockcopy_changes = {};
			if (dirty & /*actors*/ 1) blockcopy_changes.props = /*actor*/ ctx[1].message;
			blockcopy.$set(blockcopy_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blockcopy.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(blockcopy.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(blockcopy, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(50:4) {#if actor.action == \\\"block_copy\\\"}",
		ctx
	});

	return block;
}

// (53:4) {#if actor.action == "block_cut"}
function create_if_block_1(ctx) {
	let blockcut;
	let current;

	blockcut = new BlockCut({
			props: { props: /*actor*/ ctx[1].message },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(blockcut.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(blockcut, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const blockcut_changes = {};
			if (dirty & /*actors*/ 1) blockcut_changes.props = /*actor*/ ctx[1].message;
			blockcut.$set(blockcut_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blockcut.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(blockcut.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(blockcut, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(53:4) {#if actor.action == \\\"block_cut\\\"}",
		ctx
	});

	return block;
}

// (56:4) {#if actor.action == "block_rightclick"}
function create_if_block(ctx) {
	let blockrightclick;
	let current;

	blockrightclick = new BlockRightClick({
			props: { props: /*actor*/ ctx[1].message },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(blockrightclick.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(blockrightclick, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const blockrightclick_changes = {};
			if (dirty & /*actors*/ 1) blockrightclick_changes.props = /*actor*/ ctx[1].message;
			blockrightclick.$set(blockrightclick_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blockrightclick.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(blockrightclick.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(blockrightclick, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(56:4) {#if actor.action == \\\"block_rightclick\\\"}",
		ctx
	});

	return block;
}

// (40:0) {#each actors as actor}
function create_each_block(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let if_block5_anchor;
	let current;
	let if_block0 = /*actor*/ ctx[1].action == "disclaimer" && create_if_block_5(ctx);
	let if_block1 = /*actor*/ ctx[1].action == "sticky" && create_if_block_4(ctx);
	let if_block2 = /*actor*/ ctx[1].action == "block_paste" && create_if_block_3(ctx);
	let if_block3 = /*actor*/ ctx[1].action == "block_copy" && create_if_block_2(ctx);
	let if_block4 = /*actor*/ ctx[1].action == "block_cut" && create_if_block_1(ctx);
	let if_block5 = /*actor*/ ctx[1].action == "block_rightclick" && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();
			if (if_block3) if_block3.c();
			t3 = space();
			if (if_block4) if_block4.c();
			t4 = space();
			if (if_block5) if_block5.c();
			if_block5_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_dev(target, t2, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert_dev(target, t3, anchor);
			if (if_block4) if_block4.m(target, anchor);
			insert_dev(target, t4, anchor);
			if (if_block5) if_block5.m(target, anchor);
			insert_dev(target, if_block5_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*actor*/ ctx[1].action == "disclaimer") {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*actors*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_5(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*actor*/ ctx[1].action == "sticky") {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*actors*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_4(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*actor*/ ctx[1].action == "block_paste") {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*actors*/ 1) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_3(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(t2.parentNode, t2);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*actor*/ ctx[1].action == "block_copy") {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty & /*actors*/ 1) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_2(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(t3.parentNode, t3);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if (/*actor*/ ctx[1].action == "block_cut") {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty & /*actors*/ 1) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block_1(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(t4.parentNode, t4);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}

			if (/*actor*/ ctx[1].action == "block_rightclick") {
				if (if_block5) {
					if_block5.p(ctx, dirty);

					if (dirty & /*actors*/ 1) {
						transition_in(if_block5, 1);
					}
				} else {
					if_block5 = create_if_block(ctx);
					if_block5.c();
					transition_in(if_block5, 1);
					if_block5.m(if_block5_anchor.parentNode, if_block5_anchor);
				}
			} else if (if_block5) {
				group_outros();

				transition_out(if_block5, 1, 1, () => {
					if_block5 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(if_block3);
			transition_in(if_block4);
			transition_in(if_block5);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(if_block3);
			transition_out(if_block4);
			transition_out(if_block5);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach_dev(t2);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach_dev(t3);
			if (if_block4) if_block4.d(detaching);
			if (detaching) detach_dev(t4);
			if (if_block5) if_block5.d(detaching);
			if (detaching) detach_dev(if_block5_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(40:0) {#each actors as actor}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*actors*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(target, anchor);
				}
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*actors*/ 1) {
				each_value = /*actors*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Overlay', slots, []);

	const defaultMessage = {
		title: "",
		description: "",
		location: "",
		alertType: "none",
		durationInSeconds: 1
	};

	let actor = { action: "none", message: defaultMessage };
	let count = 0;
	let htmlContent;
	let actors = [];

	onMount(() => {
		function handleResponse(message) {
			if (!message.response) {
				return;
			}

			$$invalidate(0, actors = message.response);
		}

		let askMessage = { category: "REQUEST_MESSAGE" };

		function handleError(error) {
			
		}

		function getMessageDetails() {
			const sending = browser.runtime.sendMessage(askMessage);
			sending.then(handleResponse, handleError);
		}

		getMessageDetails();
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Overlay> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		onMount,
		browser,
		Disclaimer,
		StickyNotice,
		BlockPaste,
		BlockCopy,
		BlockRightClick,
		BlockCut,
		defaultMessage,
		actor,
		count,
		htmlContent,
		actors
	});

	$$self.$inject_state = $$props => {
		if ('actor' in $$props) $$invalidate(1, actor = $$props.actor);
		if ('count' in $$props) count = $$props.count;
		if ('htmlContent' in $$props) htmlContent = $$props.htmlContent;
		if ('actors' in $$props) $$invalidate(0, actors = $$props.actors);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [actors, actor];
}

class Overlay extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Overlay",
			options,
			id: create_fragment.name
		});
	}
}

import * as ___SVELTE_HMR_HOT_API from "/vendor/svelte-hmr-runtime-hot-api-esm.js__v--cfdbb230.js";import { adapter as ___SVELTE_HMR_HOT_API_PROXY_ADAPTER } from "/vendor/svelte-hmr-runtime-proxy-adapter-dom.js__v--cfdbb230.js";if (import.meta && import.meta.hot) { if (false) import.meta.hot.acceptExports(['default']);; Overlay = ___SVELTE_HMR_HOT_API.applyHmr({ m: import.meta, id: "/home/godwin/Desktop/Personal/Github/Hackathon/TiDBFutureApp/aimon/extension/src/components/Overlay.svelte", hotOptions: {"preserveLocalState":false,"noPreserveStateKey":["@hmr:reset","@!hmr"],"preserveAllLocalStateKey":"@hmr:keep-all","preserveLocalStateKey":"@hmr:keep","noReload":false,"optimistic":false,"acceptNamedExports":true,"acceptAccessors":true,"injectCss":false,"cssEjectDelay":100,"native":false,"importAdapterName":"___SVELTE_HMR_HOT_API_PROXY_ADAPTER","noOverlay":true,"allowLiveBinding":false,"partialAccept":true}, Component: Overlay, ProxyAdapter: ___SVELTE_HMR_HOT_API_PROXY_ADAPTER, acceptable: true, preserveLocalState: false, emitCss: true, }); }
export default Overlay;

